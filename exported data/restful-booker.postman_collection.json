{
	"info": {
		"_postman_id": "fbc2569d-accc-4059-b80a-a7aa8d221ccd",
		"name": "restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38125094",
		"_collection_link": "https://www.postman.com/seitovaralina/env-resful-booker/collection/zy7x3rx/restful-booker?action=share&source=collection_link&creator=38125094"
	},
	"item": [
		{
			"name": "Set Collection Variables",
			"item": [
				{
					"name": "CreateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"// set a collection variable with the token in the response\r",
									"pm.collectionVariables.set(\"token\", jsonData.token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/auth",
							"host": [
								"{{host}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"\r",
									"// set a collection variable with the booking in the response\r",
									"pm.collectionVariables.set(\"booking\", jsonData.booking)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Peter\",\r\n    \"lastname\" : \"Sweety\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-09-05\",\r\n        \"checkout\" : \"2024-10-05\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/booking/",
							"host": [
								"{{host}}"
							],
							"path": [
								"booking",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "CreateToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\", \r",
											"    function () {\r",
											"\t    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\r",
											"    \"Response contains key 'token'\",\r",
											"    function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"token\")\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Booking",
					"item": [
						{
							"name": "GetBookingIds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\", \r",
											"    function () {\r",
											"\t    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\r",
											"    \"Data type of response is array\",\r",
											"    function () {\r",
											"        pm.expect(jsonData).to.be.an(\"array\")\r",
											"});\r",
											"\r",
											"pm.test(\r",
											"    \"Array contains booking ids\",\r",
											"    function () {\r",
											"        pm.expect(jsonData.length > 0).to.be.true;\r",
											"        pm.expect(jsonData[0]).to.have.property('bookingid');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/booking",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBooking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\",\r",
											"    function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\r",
											"    \"JSON contains key 'bookingid'\",\r",
											"    function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"bookingid\")\r",
											"});\r",
											"\r",
											"var booking = pm.response.json().booking;\r",
											"pm.test(\r",
											"    \"Check the booking data. totalprice = 1000\",\r",
											"    function () {\r",
											"        pm.expect(booking.totalprice).to.eql(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Peter\",\r\n    \"lastname\" : \"Sweety\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-09-05\",\r\n        \"checkout\" : \"2024-10-05\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/booking/",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBooking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\", \r",
											"    function () {\r",
											"\t    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json()\r",
											"pm.test(\r",
											"\t\"Username for booking - Peter Sweety\",\r",
											"\tfunction () {\r",
											"        pm.expect(jsonData.firstname).to.eql(\"Peter\");\r",
											"\t\tpm.expect(jsonData.lastname).to.eql(\"Sweety\");\r",
											"});\r",
											"\r",
											"pm.variables.unset(\"bookingid\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var host = pm.environment.get(\"host\")\r",
											"\r",
											"const createBooking = {\r",
											"  url: host + \"/booking\",\r",
											"  method: 'POST',\r",
											"  header: \"content-type:application/json\",\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(pm.collectionVariables.get(\"booking\"))\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createBooking, function (err, res) {\r",
											"  console.log(err ? err : res.json().message);\r",
											"  pm.variables.set(\"bookingid\", res.json().bookingid);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/booking/{{bookingid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateBooking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\", \r",
											"    function () {\r",
											"\t    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json()\r",
											"// check only the fields that have been changed\r",
											"pm.test(\r",
											"\t\"Check updated values of response. \\\r",
											"    additionalneeds = Breakfast&Lunch, depositpaid = true, totalprice = 1200\",\r",
											"\tfunction () {\r",
											"\t\tpm.expect(jsonData.additionalneeds).to.eql(\"Breakfast&Lunch\");\r",
											"        pm.expect(jsonData.depositpaid).to.eql(true);\r",
											"        pm.expect(jsonData.totalprice).to.eql(1200);\r",
											"});\r",
											"\r",
											"var getRequest = pm.variables.get(\"host\") + \"/booking/\" + pm.variables.get(\"bookingid\")\r",
											"pm.sendRequest(getRequest, function (err, res) {\r",
											"    var jsonRes = res.json();\r",
											"    console.log(err ? err : jsonRes.message);\r",
											"    pm.test(\r",
											"        \"Check that the all changes are saved. \\\r",
											"        PATCH-request response = GET-request response\",\r",
											"        function () {\r",
											"            pm.expect(jsonData).to.eql(jsonRes)\r",
											"    })\r",
											"});\r",
											"\r",
											"pm.variables.unset(\"bookingid\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var host = pm.environment.get(\"host\")\r",
											"\r",
											"const createBooking = {\r",
											"  url: host + \"/booking\",\r",
											"  method: 'POST',\r",
											"  header: \"content-type:application/json\",\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(pm.collectionVariables.get(\"booking\"))\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createBooking, function (err, res) {\r",
											"  console.log(err ? err : res.json().message);\r",
											"  pm.variables.set(\"bookingid\", res.json().bookingid);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token=\"{{token}}\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Peter\",\r\n    \"lastname\": \"Sweety\",\r\n    \"totalprice\": 1200,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-09-05\",\r\n        \"checkout\": \"2024-10-05\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast&Lunch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/booking/{{bookingid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PartialUpdateBooking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\",\r",
											"    function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\r",
											"    \"Check updated data. \\\r",
											"    Person is Ivan Ivanov\",\r",
											"    function () {\r",
											"        pm.expect(jsonData.firstname).to.eql(\"Ivan\");\r",
											"        pm.expect(jsonData.lastname).to.eql(\"Ivanov\");\r",
											"});\r",
											"\r",
											"var getRequest = pm.variables.get(\"host\") + \"/booking/\" + pm.variables.get(\"bookingid\")\r",
											"pm.sendRequest(getRequest, function (err, res) {\r",
											"    var jsonRes = res.json();\r",
											"    console.log(err ? err : jsonRes.message);\r",
											"    pm.test(\r",
											"        \"Check that the all changes are saved. \\\r",
											"        PATCH-request response = GET-request response\",\r",
											"        function () {\r",
											"            pm.expect(jsonData).to.eql(jsonRes)\r",
											"    })\r",
											"});\r",
											"\r",
											"pm.variables.unset(\"bookingid\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var host = pm.environment.get(\"host\")\r",
											"\r",
											"const createBooking = {\r",
											"  url: host + \"/booking\",\r",
											"  method: 'POST',\r",
											"  header: \"content-type:application/json\",\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(pm.collectionVariables.get(\"booking\"))\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createBooking, function (err, res) {\r",
											"  console.log(err ? err : res.json().message);\r",
											"  pm.variables.set(\"bookingid\", res.json().bookingid);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token=\"{{token}}\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Ivan\",\r\n    \"lastname\": \"Ivanov\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/booking/{{bookingid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteBooking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 201\",\r",
											"    function () {\r",
											"        pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var getRequest = pm.variables.get(\"host\") + \"/booking/\" + pm.variables.get(\"bookingid\")\r",
											"pm.sendRequest(getRequest, function (_, res) {\r",
											"    pm.test(\r",
											"        \"Check that the booking is deleted. \\\r",
											"        GET-request status code is 404\",\r",
											"        function () {\r",
											"            pm.expect(res.code).to.eql(404);\r",
											"    })\r",
											"});\r",
											"\r",
											"pm.variables.unset(\"bookingid\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var host = pm.environment.get(\"host\")\r",
											"\r",
											"const createBooking = {\r",
											"  url: host + \"/booking\",\r",
											"  method: 'POST',\r",
											"  header: \"content-type:application/json\",\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(pm.collectionVariables.get(\"booking\"))\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createBooking, function (err, res) {\r",
											"  console.log(err ? err : res.json().message);\r",
											"  pm.variables.set(\"bookingid\", res.json().bookingid);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token=\"{{token}}\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/booking/{{bookingid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ping",
					"item": [
						{
							"name": "HealthCheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 201. API is up and running!\",\r",
											"    function () {\r",
											"        pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/ping",
									"host": [
										"{{host}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Create Token - Incorrect Auth Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\", \r",
											"    function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const expectedObject = {\r",
											"    \"reason\" : \"Bad credentials\"\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json()\r",
											"pm.test(\r",
											"    \"Response contain reason = Bad credentials\",\r",
											"    function () {\r",
											"        pm.expect(jsonData.token).to.be.undefined;\r",
											"        pm.expect(jsonData).to.deep.contain(expectedObject);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"wrong_username\",\r\n    \"password\" : \"wrong321\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/auth",
									"host": [
										"{{host}}"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Booking",
					"item": [
						{
							"name": "GetBookingIds - Invalid Type of Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\", \r",
											"    function () {\r",
											"\t    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\r",
											"    \"Data type of response is empty array\",\r",
											"    function () {\r",
											"        pm.expect(jsonData).to.be.an(\"array\");\r",
											"        pm.expect(jsonData).to.be.empty;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/booking?firstname=12345",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname",
											"value": "12345"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateBooking - Missing Body Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 500\",\r",
											"    function () {\r",
											"        pm.response.to.have.status(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Peter\",\r\n    \"lastname\" : \"Sweety\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2024-09-05\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/booking/",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBooking - Invalid Booking ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 404\", \r",
											"    function () {\r",
											"\t    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.variables.unset(\"bookingid\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var wrongid = -1\r",
											"\r",
											"pm.variables.set(\"bookingid\", wrongid);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/booking/{{bookingid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateBooking - Incorrect Body Field Value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"\t\"Status code is 200\", \r",
											"\tfunction () {\r",
											"\t\tpm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json().bookingdates.checkin;\r",
											"pm.test(\r",
											"\t\"checkin is not 2222-22-22\",\r",
											"\tfunction () {\r",
											"\t\tpm.expect(jsonData).to.not.eql(pm.variables.get(\"checkin\"));\r",
											"\t\tpm.expect(jsonData).to.eql(\"0NaN-aN-aN\");\r",
											"});\r",
											"\r",
											"pm.variables.unset(\"bookingid\");\r",
											"pm.variables.unset(\"checkin\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var host = pm.environment.get(\"host\")\r",
											"\r",
											"const createBooking = {\r",
											"  url: host + \"/booking\",\r",
											"  method: 'POST',\r",
											"  header: \"content-type:application/json\",\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(pm.collectionVariables.get(\"booking\"))\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createBooking, function (err, res) {\r",
											"  console.log(err ? err : res.json().message);\r",
											"  pm.variables.set(\"bookingid\", res.json().bookingid);\r",
											"});\r",
											"\r",
											"pm.variables.set(\"checkin\", \"2222-22-22\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token=\"{{token}}\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Peter\",\r\n    \"lastname\": \"Sweety\",\r\n    \"totalprice\": 1000,\r\n    \"depositpaid\": false,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"2024-10-05\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/booking/{{bookingid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PartialUpdateBooking - Incorrect Body Field Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 200\",\r",
											"    function () {\r",
											"        pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var textData = pm.response.text();\r",
											"pm.test(\r",
											"    \"Check that no lastname changes have occurred\",\r",
											"    function () {\r",
											"\t\tpm.expect(textData).to.not.include(pm.variables.get(\"surname\"));\r",
											"});\r",
											"\r",
											"pm.variables.unset(\"bookingid\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var host = pm.environment.get(\"host\");\r",
											"\r",
											"const createBooking = {\r",
											"  url: host + \"/booking\",\r",
											"  method: 'POST',\r",
											"  header: \"content-type:application/json\",\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify(pm.collectionVariables.get(\"booking\"))\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(createBooking, function (err, res) {\r",
											"  console.log(err ? err : res.json().message);\r",
											"  pm.variables.set(\"bookingid\", res.json().bookingid);\r",
											"});\r",
											"\r",
											"pm.variables.set(\"surname\", \"Ivanov\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token=\"{{token}}\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"surname\": \"{{surname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/booking/{{bookingid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteBooking - Empty Booking ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\r",
											"    \"Status code is 404\",\r",
											"    function () {\r",
											"        pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.variables.unset(\"bookingid\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"bookingid\", \"\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token=\"{{token}}\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/booking/{{bookingid}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "booking",
			"value": ""
		}
	]
}